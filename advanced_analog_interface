module advanced_analog_interface(
  input clk,
  input rst,
  input analog_in,
  output reg [15:0] analog_out,
  output reg adc_rdy
);

reg [15:0] sample_reg;
reg [2:0] state;

// Constants for the states
parameter IDLE = 3'b000,
          SAMPLING = 3'b001,
          DATA_TRANSFER = 3'b010;

// Initialize state registers
always @(posedge clk or negedge rst) begin
  if (~rst) begin
    state <= IDLE;
  end else begin
    state <= state;
  end
end

// ADC interface state machine
always @(posedge clk) begin
  case (state)
    IDLE: begin
      adc_rdy <= 0;
      state <= SAMPLING;
    end
    SAMPLING: begin
      sample_reg <= analog_in;
      state <= DATA_TRANSFER;
    end
    DATA_TRANSFER: begin
      adc_rdy <= 1;
      analog_out <= sample_reg;
      state <= IDLE;
    end
  endcase
end

endmodule
